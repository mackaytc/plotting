x.min <- quantile(plt.data[, x.var], seq(0, 1, 0.05))[2]
x.max <- quantile(plt.data[, x.var], seq(0, 1, 0.05))[20]
y.min <- quantile(plt.data[, y.var], seq(0, 1, 0.05))[2]
y.max <- quantile(plt.data[, y.var], seq(0, 1, 0.05))[20]
lbls.df <- filter(plt.data, X3PAr < x.min | X3PAr > x.max |
FTr > y.max | FTr < y.min)
ggplot(data = plt.data, aes(x = x.var, y = y.var))
################################################################################
# Scatter Plot with Selectively Labeled Points Using ggplot2
################################################################################
library(dplyr)
library(ggplot2)
# Load sample dataset with 2016 player statistics for all players in NBA
load("basketball.Rda")
################################################################################
# Comparing True Shooting Pct and Foul Rate
################################################################################
# Subsetting data to just look at guards with over 2000 minutes of game time
plt.data <- filter(nba.data, (Pos == "PG" | Pos == "SG") & MP > 1500)
# We want to look at highest and lowest rated players by free throw attempt
# rate (FTr) and 3 pt attempt rate (X3PAr), defined as 5th and 95th percentiles
x.var <- "X3PAr"
y.var <- "FTr"
# Calculating thresholds for labeling
x.min <- quantile(plt.data[, x.var], seq(0, 1, 0.05))[2]
x.max <- quantile(plt.data[, x.var], seq(0, 1, 0.05))[20]
y.min <- quantile(plt.data[, y.var], seq(0, 1, 0.05))[2]
y.max <- quantile(plt.data[, y.var], seq(0, 1, 0.05))[20]
lbls.df <- filter(plt.data, X3PAr < x.min | X3PAr > x.max |
FTr > y.max | FTr < y.min)
ggplot(data = plt.data, aes(x = X3PAr, y = FTr))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plt.data
plt.data[, X3PAr]
plt.data$X3PAr
plt.data <- filter(nba.data, (Pos == "PG" | Pos == "SG") & MP > 2000)
plt.data[, X3PAr]
plt.data$X3PAr
source('~/.active-rstudio-document', echo=TRUE)
t.data$X3PAr, seq(0, 1, 0.05))[2]
x.max <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[20]
y.min <- quantile(plt.data$FTr, seq(0, 1, 0.05))[2]
y.max <- quantile(plt.data$FTr, seq(0, 1, 0.05))[20]
lbls.df <- filter(plt.data, X3PAr < x.min | X3PAr > x.max |
FTr > y.max | FTr < y.min)
ggplot(data = plt.data, aes(x = X3PAr, y = FTr)) + geom_point() +
geom_text_repel(data = lbls.df, aes(lbls.df[, X3PAr], lbls.df[, FTr],
label = Player))
source('~/.active-rstudio-document', echo=TRUE)
################################################################################
# Scatter Plot with Selectively Labeled Points Using ggplot2
################################################################################
library(dplyr)
library(ggplot2)
# Load sample dataset with 2016 player statistics for all players in NBA
load("basketball.Rda")
################################################################################
# Comparing True Shooting Pct and Foul Rate
################################################################################
# Subsetting data to just look at guards with over 2000 minutes of game time
plt.data <- filter(nba.data, (Pos == "PG" | Pos == "SG") & MP > 2000)
# We want to look at highest and lowest rated players by free throw attempt
# rate (FTr) and 3 pt attempt rate (X3PAr), defined as 5th and 95th percentiles
x.min <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[2]
x.max <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[20]
y.min <- quantile(plt.data$FTr, seq(0, 1, 0.05))[2]
y.max <- quantile(plt.data$FTr, seq(0, 1, 0.05))[20]
# Subset plotting dataset to just the observations that we want to have names
# included on the plot
lbls.df <- filter(plt.data, X3PAr < x.min | X3PAr > x.max |
FTr > y.max | FTr < y.min)
# Scatter Plot
ggplot(data = plt.data, aes(x = X3PAr, y = FTr)) + geom_point()
source('~/.active-rstudio-document', echo=TRUE)
################################################################################
# Scatter Plot with Selectively Labeled Points Using ggplot2
################################################################################
library(dplyr)
library(ggplot2)
# Load sample dataset with 2016 player statistics for all players in NBA
load("basketball.Rda")
################################################################################
# Comparing True Shooting Pct and Foul Rate
################################################################################
# Subsetting data to just look at guards with over 2000 minutes of game time
plt.data <- filter(nba.data, (Pos == "PG" | Pos == "SG") & MP > 2000)
# We want to look at highest and lowest rated players by free throw attempt
# rate (FTr) and 3 pt attempt rate (X3PAr), defined as 5th and 95th percentiles
x.min <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[2]
x.max <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[20]
y.min <- quantile(plt.data$FTr, seq(0, 1, 0.05))[2]
y.max <- quantile(plt.data$FTr, seq(0, 1, 0.05))[20]
# Subset plotting dataset to just the observations that we want to have names
# included on the plot
lbls.df <- filter(plt.data, X3PAr < x.min | X3PAr > x.max |
FTr > y.max | FTr < y.min)
# Scatter Plot
ggplot(data = plt.data, aes(x = X3PAr, y = FTr)) + geom_point()
ggplot(data = plt.data, aes(x = X3PAr, y = FTr)) + geom_point() +
geom_text_repel(data = lbls.df, aes(x = X3PAr, y = FTr, label = Player))
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
# Load sample dataset with 2016 player statistics for all players in NBA
load("basketball.Rda")
# Comparing True Shooting Pct and Three Point Attempt Rate
# We'll use the `ggrepel` package to get neatly formatted labels
library(ggrepel)
# Subsetting data to just look at guards with over 2000 minutes of game time
plt.data <- filter(nba.data, (Pos == "PG" | Pos == "SG") & MP > 2000)
# We want to look at highest and lowest rated players by free throw attempt
# rate (FTr) and 3 pt attempt rate (X3PAr), defined as 5th and 95th percentiles
x.min <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[2]
x.max <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[20]
y.min <- quantile(plt.data$FTr, seq(0, 1, 0.05))[2]
y.max <- quantile(plt.data$FTr, seq(0, 1, 0.05))[20]
# Subset plotting dataset to just the observations that we want to have names
# included on the plot
lbls.df <- filter(plt.data, X3PAr < x.min | X3PAr > x.max |
FTr > y.max | FTr < y.min)
# Scatter Plot
ggplot(data = plt.data, aes(x = X3PAr, y = FTr)) +
geom_point(shape = 1, color = "grey30") +
geom_text_repel(data = lbls.df, aes(x = X3PAr, y = FTr, label = Player),
family = "Palatino", box.padding = 0.5)
# Load sample dataset with 2016 player statistics for all players in NBA
load("basketball.Rda")
# Comparing True Shooting Pct and Three Point Attempt Rate
# We'll use the `ggrepel` package to get neatly formatted labels
library(ggrepel)
# Subsetting data to just look at guards with over 2000 minutes of game time
plt.data <- filter(nba.data, (Pos == "PG" | Pos == "SG") & MP > 2000)
# We want to look at highest and lowest rated players by free throw attempt
# rate (FTr) and 3 pt attempt rate (X3PAr), defined as 5th and 95th percentiles
x.min <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[2]
x.max <- quantile(plt.data$X3PAr, seq(0, 1, 0.05))[20]
y.min <- quantile(plt.data$FTr, seq(0, 1, 0.05))[2]
y.max <- quantile(plt.data$FTr, seq(0, 1, 0.05))[20]
# Subset plotting dataset to just the observations that we want to have names
# included on the plot
lbls.df <- filter(plt.data, X3PAr < x.min | X3PAr > x.max |
FTr > y.max | FTr < y.min)
# Scatter Plot
ggplot(data = plt.data, aes(x = X3PAr, y = FTr)) +
geom_point(shape = 1, color = "grey30") +
geom_text_repel(data = lbls.df, aes(x = X3PAr, y = FTr, label = Player),
family = "Palatino", box.padding = 0.5,
segment.color = "grey70")
ggplot(data = plt.data, aes(x = X3PAr, y = FTr)) +
geom_point(shape = 1, color = "grey30") +
geom_text_repel(data = lbls.df, aes(x = X3PAr, y = FTr, label = Player),
family = "Palatino", box.padding = 0.5,
segment.color = "grey70")
source('~/Documents/plotting/plot_code/scatter_plot_selective_labels.R', echo=TRUE)
################################################################################
# Bubble Chart: Scatter Plot with Variable Point Size Using ggplot2
################################################################################
library(dplyr)
library(ggplot2)
# Load sample dataset with 2016 player statistics for all players in NBA
load("basketball.Rda")
# library(maps)
# library(ggmap)
library(mapdata)
################################################################################
# Loading Data + Plotting Theme
################################################################################
counties <- map_data("county")
states   <- map_data("state")
?map_data
states   <- map_data("state")
nc_state_map <- ggplot(data = states,
mapping = aes(x = long, y = lat, group = group))
ggplot(data = states,
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) + geom_polygon(color = "black", fill = "gray80") +
theme_minimal() + ditch_the_axes
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
ggplot(data = states,
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) + geom_polygon(color = "black", fill = "gray80") +
theme_minimal() + ditch_the_axes
ggplot(data = states,
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) + geom_polygon(color = "black", fill = "gray80") +
theme_minimal() + ditch_the_axes + theme_bcg
ggplot(data = states,
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) + geom_polygon(color = "black", fill = "gray80") +
ditch_the_axes
ggplot(data = states,
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray80") +
ditch_the_axes
ggplot(data = states,
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray90") +
ditch_the_axes
ggplot(data = states,
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray90") +
theme_minimal() + ditch_the_axes
ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray90") +
theme_minimal() + ditch_the_axes
ggplot(data = subset(states, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray90") +
theme_minimal() + ditch_the_axes
ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray90") +
theme_minimal() + ditch_the_axes
ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray40") +
theme_minimal() + ditch_the_axes
ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray99") +
theme_minimal() + ditch_the_axes
ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray99") +
theme_minimal() + ditch_the_axes
ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
source('~/Documents/plotting/plot_code/map_US_CA.R', echo=TRUE)
source('~/Documents/plotting/plot_code/map_US_CA.R', echo=TRUE)
source('~/Documents/plotting/plot_code/map_US_CA.R', echo=TRUE)
?map_data
source('~/Documents/plotting/plot_code/map_US_CA.R', echo=TRUE)
?maps
detach("package:maps", unload=TRUE)
detach("package:mapdata", unload=TRUE)
source('~/Documents/plotting/plot_code/map_US_CA.R', echo=TRUE)
ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(2) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
source('~/Documents/plotting/plot_code/map_US_CA.R', echo=TRUE)
# Packages for map plotting-- `ggthemes` loads the `theme_minimal()` style
# used below, while `gridExtra` lets you control layouts of displayed plots.
# The `maps` package contains
library(maps)
library(ggthemes)
library(gridExtra)
# Loading Data + Plotting Theme
# Loading geographic data for states + counties in the US. `map_data()` takes
# the series of points-based data provided by the `maps` package and converts
# into a df that is readable via ggplot2
counties <- map_data("county")
states   <- map_data("state")
# Theme below removes all unneccessary axes and tick marks from plots
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
# Basic state-level plot of the United States. Note the use of `coord_fixed()`
# to prevent distortion along the x / y axes-- setting alternative parameter
# options here "stretches" the along the y-axis.
p.1 <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(2) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# Plot of the counties within California
p.2 <- ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# `grid.arrange()` to display them next to one another
grid.arrange(p.1, p.2, widths = 2:1)
# Packages for map plotting-- `ggthemes` loads the `theme_minimal()` style
# used below, while `gridExtra` lets you control layouts of displayed plots.
# The `maps` package contains
library(maps)
library(ggthemes)
library(gridExtra)
# Loading Data + Plotting Theme
# Loading geographic data for states + counties in the US. `map_data()` takes
# the series of points-based data provided by the `maps` package and converts
# into a df that is readable via ggplot2
counties <- map_data("county")
states   <- map_data("state")
# Theme below removes all unneccessary axes and tick marks from plots
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
# Basic state-level plot of the United States. Note the use of `coord_fixed()`
# to prevent distortion along the x / y axes-- setting alternative parameter
# options here "stretches" the along the y-axis.
p.1 <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(2) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# Plot of the counties within California
p.2 <- ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# `grid.arrange()` to display them next to one another
grid.arrange(p.1, p.2, widths = 2:1)
# Packages for map plotting-- `ggthemes` loads the `theme_minimal()` style
# used below, while `gridExtra` lets you control layouts of displayed plots.
# The `maps` package contains
library(maps)
library(ggthemes)
library(gridExtra)
# Loading Data + Plotting Theme
# Loading geographic data for states + counties in the US. `map_data()` takes
# the series of points-based data provided by the `maps` package and converts
# into a df that is readable via ggplot2
counties <- map_data("county")
states   <- map_data("state")
# Theme below removes all unneccessary axes and tick marks from plots
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
# Basic state-level plot of the United States. Note the use of `coord_fixed()`
# to prevent distortion along the x / y axes-- setting alternative parameter
# options here "stretches" the along the y-axis.
p.1 <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(2) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# Plot of the counties within California
p.2 <- ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# `grid.arrange()` to display them next to one another
# grid.arrange(p.1, p.2, nrow = 1)
# Packages for map plotting-- `ggthemes` loads the `theme_minimal()` style
# used below, while `gridExtra` lets you control layouts of displayed plots.
# The `maps` package contains
library(maps)
library(ggthemes)
library(gridExtra)
# Loading Data + Plotting Theme
# Loading geographic data for states + counties in the US. `map_data()` takes
# the series of points-based data provided by the `maps` package and converts
# into a df that is readable via ggplot2
counties <- map_data("county")
states   <- map_data("state")
# Theme below removes all unneccessary axes and tick marks from plots
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
# Basic state-level plot of the United States. Note the use of `coord_fixed()`
# to prevent distortion along the x / y axes-- setting alternative parameter
# options here "stretches" the along the y-axis.
p.1 <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(2) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# Plot of the counties within California
p.2 <- ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# `grid.arrange()` to display them next to one another
grid.arrange(p.1, p.2, nrow = 1)
# Packages for map plotting-- `ggthemes` loads the `theme_minimal()` style
# used below, while `gridExtra` lets you control layouts of displayed plots.
# The `maps` package contains
library(maps)
library(ggthemes)
library(gridExtra)
# Loading Data + Plotting Theme
# Loading geographic data for states + counties in the US. `map_data()` takes
# the series of points-based data provided by the `maps` package and converts
# into a df that is readable via ggplot2
counties <- map_data("county")
states   <- map_data("state")
# Theme below removes all unneccessary axes and tick marks from plots
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
# Basic state-level plot of the United States. Note the use of `coord_fixed()`
# to prevent distortion along the x / y axes-- setting alternative parameter
# options here "stretches" the along the y-axis.
p.1 <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(2) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# Plot of the counties within California
p.2 <- ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# `grid.arrange()` to display them next to one another
grid.arrange(p.1, p.2, nrow = 1)
# Packages for map plotting-- `ggthemes` loads the `theme_minimal()` style
# used below, while `gridExtra` lets you control layouts of displayed plots.
# The `maps` package contains
library(maps)
library(ggthemes)
library(gridExtra)
# Loading Data + Plotting Theme
# Loading geographic data for states + counties in the US. `map_data()` takes
# the series of points-based data provided by the `maps` package and converts
# into a df that is readable via ggplot2
counties <- map_data("county")
states   <- map_data("state")
# Theme below removes all unneccessary axes and tick marks from plots
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank()
)
# Basic state-level plot of the United States. Note the use of `coord_fixed()`
# to prevent distortion along the x / y axes-- setting alternative parameter
# options here "stretches" the along the y-axis.
p.1 <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# Plot of the counties within California
p.2 <- ggplot(data = subset(counties, region == "california"),
mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1) + geom_polygon(color = "black", fill = "gray95") +
theme_minimal() + ditch_the_axes
# `grid.arrange()` to display them next to one another
grid.arrange(p.1, p.2, nrow = 1)
install.packages("keras")
library(keras)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install_keras()
install.packages('curl')
install_keras()
source('~/.active-rstudio-document', echo=TRUE)
library(keras)
mnist <- dataset_mnist()
reticulate::py_config()
reticulate::py_discover_config("keras")
reticulate::py_discover_config("tensorflow")
use_condaenv("r-tensorflow")
mnist <- dataset_mnist()
library(keras)
source('~/.active-rstudio-document', echo=TRUE)
library(reticulate)
py_discover_config('keras')
Sys.setenv(KERAS_IMPLEMENTATION = "tensorflow")
mnist <- dataset_mnist()
use_condaenv("r-tensorflow")
mnist <- dataset_mnist()
use_python
?use_python
use_python(" /Users/Taylor/anaconda/envs/datasci/bin/python
")
mnist <- dataset_mnist()
remove.packages("keras")
remove.packages("tensorflow")
rm(list = ls())
clear()
exit()
